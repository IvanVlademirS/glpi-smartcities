<?php
//============================================================================//
//==    Plugin pour GLPI - Dévelloppeur: Viduc (Fleury Tristan) - ©2013     ==//
//==            http://viduc.sugarbox.fr - viduc@sugarbox.fr                ==//
//============================================================================//

/**
 * Class pour la partie gestion de la configuration
 */
class PluginReformeConfig extends CommonDBTM
    {
    /**
     * Récupère les information sur les AD enregistrés
     * Retour un tableau avec ID + valeur
     * @global type $DB
     * @return string
     */
    function getAD()
        {
        global $DB;
        $retour = null;
        $query = "SELECT * FROM glpi_plugin_reforme_ad WHERE vie='1'";
        if ($result = $DB->query($query))
            {
            if ($DB->numrows($result) > 0)
                {
                $i = 0;
                while ($row = $DB->fetch_assoc($result)) 
                    {
                    if (!empty($row['id'])){$ad['id'] = $row['id'];}
                    else{$ad['id'] = "";}
                    if (!empty($row['serveur'])){$ad['serveur'] = $row['serveur'];}
                    else{$ad['serveur'] = "";}
                    if (!empty($row['dc'])){$ad['dc'] = $row['dc'];}
                    else{$ad['dc'] = "";}
                    if (!empty($row['suffix'])){$ad['suffix'] = $row['suffix'];}
                    else{$ad['suffix'] = "";}
                    if (!empty($row['login'])){$ad['login'] = $row['login'];}
                    else{$ad['login'] = "";}
                    if (!empty($row['passwd'])){$ad['passwd'] = $row['passwd'];}
                    else{$ad['passwd'] = "";}
                    $retour[$i] = $ad;
                    $i++;
                    }
                }  
            }
        return $retour;
        }
    
    /**
     * Créé un enregistrement dans la base pour un nouvel AD
     */
    function setAD()
        {
        global $DB;
        $query = "INSERT INTO glpi_plugin_reforme_ad (serveur,dc,suffix,login,passwd,vie) VALUES ('','','','','','1')";
        $DB->query($query) or die($DB->error());
        }
 
    /**
     * Enregistre la valeur d'une information concernant un AD
     * @global type $DB
     * @param type $identifiant
     * @param type $valeur
     */
    function setValeurInfoAD($identifiant,$valeur)
        {
        global $DB;
        $id = substr($identifiant, -1);
        $champ = substr($identifiant, 0, -1);
        $valid = true;
        
        if($champ == "valider:")
            {
            //Vérification de la cohérence des données (serveur, dc et suffix)
            foreach ($valeur as $key => $value)
                {
                if($key == "serveur" || $key == "dc" || $key == "suffix")
                    {
                    $query = "SELECT $key FROM glpi_plugin_reforme_ad WHERE id!='$id'";
                    if ($result = $DB->query($query))
                        {
                        if ($DB->numrows($result) > 0)
                        
                            {
                            while ($row = $DB->fetch_assoc($result))
                                {
                                if(!empty($row[$key]) && $row[$key]==$value)
                                    {
                                    $valid = false;
                                    echo "L'élément $key => $value n'a pas pu être modifié car il est enregistré pour un autre serveur.";
                                    } 
                                }
                            }
                        }
                    }
                }
            if($valid)
                {
                $query = "UPDATE glpi_plugin_reforme_ad SET serveur='".$valeur["serveur"]."',
                    dc='".$valeur["dc"]."', suffix='".$valeur["suffix"]."',
                    login='".$valeur["login"]."', passwd='".$valeur["passwd"]."'  WHERE id='$id'";
                $DB->query($query);
                echo "Les informations ont été enregistrées avec succès.";
                }
            }
        else
            {
            //Vérification de la cohérence des données (serveur, dc et suffix)
            if($champ == "serveur" || $champ == "dc" || $champ == "suffix")
                {
                $query = "SELECT $champ FROM glpi_plugin_reforme_ad WHERE id!='$id'";
                if ($result = $DB->query($query))
                    {
                    if ($DB->numrows($result) > 0)
                    
                        {
                        while ($row = $DB->fetch_assoc($result))
                            {
                            if(!empty($row[$champ]) && $row[$champ]==$valeur)
                                {
                                $valid = false;
                                echo "L'élément n'a pas pu être modifié car il est enregistré pour un autre serveur.";
                                }
                            }
                        }
                    }
                }
            if($valid)
                {
                //Modification de la valeur dans la bd
                $query = "UPDATE glpi_plugin_reforme_ad SET $champ='$valeur' WHERE id='$id'";
                $DB->query($query);
                echo "L'élément a été modifié avec succès.";
                }
            }
        }
        
    /**
     * Récupère les informations administratives enregistrées dans la bd
     * @global type $DB
     * @return string tableau de valeur
     */
    function getInfoAdministrative()
        {
        global $DB;
        //Récupération des informations de configuration
        $query = "SELECT * FROM glpi_plugin_reforme_config WHERE id='1'";
        $mail = ""; $structure = ""; $service = ""; $statut = ""; $supp = "";
        $des_bien = ""; $ref_type = ""; $num_commande = ""; $num_facture = "";
        if ($result = $DB->query($query))
            {
            if ($DB->numrows($result) > 0)
                {
                $row = $DB->fetch_assoc($result);
                if (!empty($row['mail_reforme'])) {$mail = $row['mail_reforme'];}
                if (!empty($row['structure'])) {$structure = $row['structure'];}
                if (!empty($row['service'])) {$service = $row['service'];}
                if (!empty($row['statut'])) {$statut = $row['statut'];}
                if (!empty($row['des_bien'])) {$des_bien = $row['des_bien'];}
                if (!empty($row['ref_type'])) {$ref_type = $row['ref_type'];}
                if (!empty($row['num_commande'])) {$num_commande = $row['num_commande'];}
                if (!empty($row['num_facture'])) {$num_facture = $row['num_facture'];}
                $supp = $row['supp'];
                }  
            }
        $retour['mail'] = $mail;
        $retour['structure'] = $structure;
        $retour['service'] = $service;
        $retour['statut'] = $statut;
        $retour['supp'] = $supp;
        $retour['des_bien'] = $des_bien;
        $retour['ref_type'] = $ref_type;
        $retour['num_commande'] = $num_commande;
        $retour['num_facture'] = $num_facture;
        return $retour;
        }
        
    /**
     * Récupère une information administrative
     * @global type $DB
     * @param type $identifiant
     * @return type
     */
    function getValeurInfoAdministrative($identifiant)
        {
        global $DB;
        //Récupération de la valeur
        $query = "SELECT $identifiant FROM glpi_plugin_reforme_config WHERE id='1'";
        $valeur = "";
        if ($result = $DB->query($query))
            {
            if ($DB->numrows($result) > 0)
                {
                $row = $DB->fetch_assoc($result);
                if (!empty($row[$identifiant])) {$valeur = $row[$identifiant];}
                }  
            }
        return $valeur;
        }
    
    /**
     * Enregistre une information administrative
     * @global type $DB
     * @param type $identifiant
     * @param type $valeur
     */
    function setValeurInfoAdministrative($identifiant,$valeur)
        {
        global $DB;
        if($identifiant == "valider")
            {
            $query = "UPDATE glpi_plugin_reforme_config SET structure='".$valeur["structure"]."',service='".$valeur["service"]."'
            ,mail_reforme='".$valeur["mail"]."',statut='".$valeur["statut"]."',supp='".$valeur["supp"]."' WHERE id='1'";
            }
        else //Modification de la valeur dans la bd
            {$query = "UPDATE glpi_plugin_reforme_config SET $identifiant='$valeur' WHERE id='1'";}
        $DB->query($query);
        }

    /**
     * Enregistre les info supplémentaires à faire apparaitre sur le bon de réforme
     * @param type $info
     */
    function saveInfo($info){
        global $DB;
        $arr = str_split($info);
        
        $val1 = 0;$val2 = 0;$val3 = 0;$val4 = 0;
        foreach($arr as $value){
            switch ($value){
                case 1:
                    $val1 = 1;
                    $query .= 'des_bien="1",';
                    break;
                case 2:
                    $val2 = 1;
                    $query .= 'ref_type="1",';
                    break;
                case 3:
                    $val3 = 1;
                    $query .= 'num_commande="1",';
                    break;
                case 4:
                    $val4 = 4;
                    $query .= 'num_facture="1",';
                    break;
            }
        }
        $query = 'UPDATE glpi_plugin_reforme_config SET ';
        $query .= 'des_bien="'.$val1.'",ref_type="'.$val2.'",';
        $query .= 'num_commande="'.$val3.'",num_facture="'.$val4.'"';
        $query .= " WHERE id='1'";
        $DB->query($query);
        return ("Informations enregistrées");
    }
    
    /**
     * Récupère la liste des statut de machine disponibles
     * @global type $DB
     * @return un tableau de valeur
     */   
    function getStatutListe()
        {
        global $DB;
        //Récupération des informations de configuration
        $query = "SELECT id,name FROM glpi_states";
        $retour = null;
        if ($result = $DB->query($query))
            {
            while ($row = $DB->fetch_assoc($result))
                {
                if (!empty($row['name'])) 
                    {$retour[$row['id']] = $row['name'];}
                }  
            }
        return $retour;
        }
    
    /**
     * Test la connexion à l'ad
     * @param array $valeur
     * $valeur['login']
     * $valeur['passwd']
     * $valeur['dc']
     * $valeur['suffix']
     * $valeur['serveur']
     */
    function testerAD($valeur)
    {
        // instanciation de adldap
        $cheminAdldap = $this->getAbsolutePath()."adldap";
        require_once($cheminAdldap . '/adLDAP.php');

        $serveur[0]=$valeur['serveur'];
        $adldap = new adLDAP(array('base_dn'=>$valeur['dc'], 'account_suffix'=>$valeur['suffix'], 'domain_controllers'=>$serveur));

        $authUser = $adldap->authenticate($valeur['login'], $valeur['passwd']);
        $adldap->close();
        if ($authUser == true) {echo "Test de connexion réussit";}
        else {echo "Test de connexion échoué";}
    }
    
    /**
     * Récupère le chemin absolue de l'instance glpi
     * @return String : le chemin absolue (racine principale)
     */
    function getAbsolutePath()
        {return str_replace("ajax/config.ajax.php", "", $_SERVER['SCRIPT_FILENAME']);}

    /**
    * Récupère le chemin http absolu de l'application glpi
    * @return string : le chemin http absolue de l'application
    */
   function getHttpPath()
       {
       $temp = explode("/",$_SERVER['HTTP_REFERER']);
       $Ref = "";
       foreach ($temp as $value)
           {
           if($value != "front"){$Ref.= $value."/";}
           else{break;}
           }
       return $Ref;
       }
    }
?>
